Jan 24, 2021: v1.7.0
	Released at https://www.nuget.org/packages/TypeClassMapper/1.7.0
	Added net5.0 to existing test case runtimes (besides netcoreapp3.1).
	AddMapping method adds exception for the case of unsupported non-deterministic object mapping.
	Added ctor for Type_Class_Catalog with Client_Type type parameter is Type.

Jan 24, 2021: v1.6.0
	Released at https://www.nuget.org/packages/TypeClassMapper/1.6.0
	Added net5.0 to existing test case runtimes (besides netcoreapp3.1).
	AddMapping method adds exception for the case of unsupported non-deterministic object mapping.

Aug 29, 2019: v1.5.0
	Released at https://www.nuget.org/packages/TypeClassMapper/1.5.0
	As .NET Standard

Abr 07, 2018: v1.5.0
	Added Basic_Type_Creator_Map test case.
	Added ctor for implicit empty type-class mapping and explicit type-creator mapping.

Oct 02, 2016: v1.4.0
	Released at https://www.nuget.org/packages/TypeClassMapper/1.4.0
	Added specifications: NameWithResetableValue, CheckNameDoesNotExist, CheckNameExists.

Jul 31, 2016: v1.3.0
	Released at https://www.nuget.org/packages/TypeClassMapper/1.3.0
	Please notice the following breaking changes in this version:
	-The System.String data type no longer specifies a Type name or a Class name; the new TypeClassID class is used instead. So, some constructors don’t compile if you pass a collection parameter declared with the System.String data type. Just change the declaration from System.String to TypeClassID; you can still pass string values in such constructors as TypeClassID has an implicit operator for strings.
	-Now the Type-to-Class mappings (Type_Class_Map) are specified separately from Type-to-Instance mappings (Type_Object_Map). Hence, the constructors with Type-to-Instance mappings don’t compile or have different semantics.

	Also, please take note of the following new or renamed concepts in this version:

	-Type_Class_Catalog - There is no longer a single Type-Class map; now there is a catalog of RequiredType –ClientType – MappedClass tuples. ClientType is optional, for backward compatibility purposes, and can be the runtime Type of a requesting client or a string value that could work a la COM ProgID, but not necessarily as a machine-wide ProgID but only for the very specific context of an application.

	-Type_Object_Map - Type-to-Instance mappings continue to be supported, but now is called Type_Object_Map.

	-Name_Object_Map - The support for Name-Value pairs continues, but now is called Name_Object_Map.

Jul 18, 2016: v1.2.0
	Released at https://www.nuget.org/packages/TypeClassMapper/1.2.0

Jul 10, 2016: v1.1.0
	Released at https://www.nuget.org/packages/TypeClassMapper/1.1.0

Jul 9, 2016: v1.0.0
	Initially released at https://www.nuget.org/packages/TypeClassMapper/1.0.0